/***************************************************************************
 *	@ファイル名		:	adc.h
 *	@概要		:	ADCでマザーボード上のANALOG-INポートに印加された電圧を読み取ります．
 *					ANALOG-INは以下の8ピンで構成され，すべてADC1を使用します．
 *
 *					PA2, PA3,　PB0, PB1,	PC1, PC2, PC4, PC5
 *
 *					また，本ライブラリにおいて以下の2つのモードが存在するので，用途に合わせて
 *					使い分けるようにしてください．
 *
 *					[シングルモード]
 *					1chに対し，断続的なAD変換が行われます．つまり，AD変換を1回ずつ行います．
 *					そのため最新の印加電圧を得ることができますが，メインの処理はAD変換が終了
 *					するまで滞ることになります．
 *
 *					[連続スキャンモード]
 *					8ch(ANALOG-INすべて)に対し，連続的なAD変換が行われます．つまり，
 *					1回変換が行われた後も，一定間隔で変換をし続けます．それによってメインの処理
 *					を止めることなく変換結果を得ることができますが，読み取った時点でのデータが
 *					最新のデータでない場合があります．
 *
 *	@バージョン		:	2.0.0
 *	@開発者		:	キネクト
 *	@使用環境		:	STM32F4DISCOVERY, MB_Ver3, MB_Ver4, Coocox CoIDE
 **************************************************************************/

#ifndef __ADC_H__
#define __ADC_H__

/* インクルード	============================================================= */
#include <stm32f4xx.h>

/* 定数定義	============================================================= */
/* ADCのサンプリング周波数，"ADC_SampleTime_56Cycles"が割り込み間隔的に適当 */
#define ADC_SINGLECONV_CYCLE	ADC_SampleTime_56Cycles
#define ADC_CONTSCAN_CYCLE		ADC_SampleTime_56Cycles

/* マクロ定義	============================================================= */
/* -------------------------------------------------
 * @関数名	:	ADC_ContScan_Read
 * @概要		:	ADCの連続スキャンモードで得た結果を参照します．
 * @引数		:	読み取るチャンネル
 * @戻り値	:	変換結果
 * ---------------------------------------------- */
#define ADC_ContScan_Read(ch)	(adc_contscan_value[ch])

/* 変数プロトタイプ宣言	===================================================== */
extern volatile u16 adc_contscan_value[8];	// 連続スキャンモードの変換結果

/* 関数プロトタイプ宣言	===================================================== */
/* -------------------------------------------------
 * @関数名	:	ADC_Single_Init
 * @概要		:	ADCをシングルモードで初期化します．
 * @引数		:	なし
 * @戻り値	:	なし
 * ---------------------------------------------- */
void ADC_Single_Init(void);

/* -------------------------------------------------
 * @関数名	:	ADC_Single_Read
 * @概要		:	AD変換をシングルモードで行います．
 * 				この処理は変換終了までループします．
 * @引数-ch	:	AD変換するチャンネル番号
 * @戻り値	:	変換結果
 * ---------------------------------------------- */
u16 ADC_Single_Read(u8 ch);

/* -------------------------------------------------
 * @関数名	:	ADC_ContScan_Init
 * @概要		:	ADCを連続スキャンモードで初期化し，変換結果は
 * 				配列adc_contscan_valueへ格納します．
 * 				また，格納にはDMA(Direct Memory Access)
 * 				を利用しています．
 * @引数		:	なし
 * @戻り値	:	なし
 * ---------------------------------------------- */
void ADC_ContScan_Init(void);

#endif /* __ADC_H__ */
