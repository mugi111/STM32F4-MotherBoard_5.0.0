/***************************************************************************
 *	@ファイル名		:	terunet.h
 *	@概要		:	terunet通信の送受信関数を提供する．
 *
 *					通信の大まかな方法は以下の通り，
 *
 *					(1)Master側からSendFrameを用いて，
 *					　　 ・ダミーデータ
 *					　　 ・送信先アドレス
 *					　　 ・送信コマンド
 *					　　 ・送信データ数(バイト)
 *					　　 ・送信データ
 *					　　 ・チェックサム
 *					  　 を送信する．
 *					(2)Slave側からReceiveFrameを用いて，
 *					　　 ・コマンド
 *					　　 ・データ数(バイト)
 *					　　 ・データ
 *					　　 ・チェックサム
 *					　　を受信する．
 * ------------------------------Terunet通信データ送信プロトコル ------------------------------------
 *　・9bitシリアル通信のプロトコル名は"Terunet"とする．
 * ・9bitシリアル通信により，アドレスとデータを区別する．9bit目がHIGHの場合はアドレス，LOWの場合はデータとする．
 * ・9bitシリアル通信は，パリティビットを強制的に操作することで実現するため，ほとんどのUARTで実装できる．
 *
 * 次に示すフレーム単位で通信を行う．
 * +------------+---------+---------+-------------+---------+----------+
 * | Dummy byte | Address | Command | Data length | Data... | CheckSum |
 * +------------+---------+---------+-------------+---------+----------+
 *
 * (1)先頭のDummy byteは，RS485の通信ラインがひとつしかないため送信・受信をトランシーバIC(LTC485など)で切り替える際の
 *    切り替えに若干時間がかかるため，最初のデータを欠落する恐れがある.よってdummyを送信するというものである．Dummy byte
 *    は0xffで統一する．
 * (2)Addressは上位4bitsを機能別アドレス，下位4bitsをナンバーとする．
 * (3)Commandは1byteのコマンドデータである．これで，通信しているデータの種類が判別できる．
 * (4)Data lengthはそのあとに続くDataの総数を1byteに格納する．したがって最大送信データ数は255[byte]である．
 *    ただし，CheckSumの1byteはデータ数に含まないとする．
 * (5)Dataには送信したいデータをData lengthで指定したバイト数だけ格納する．
 * (6)CheckSumには，CommandからDataの終端までの総和の下位8bitを格納する．
 *
 * 注意
 * ・ロボットのメインマイコンがマスター(アドレス0x00)，モータードライバなどの各基板がスレーブとなり通信する．
 * ・マスターだけが自由に通信開始をすることができ，スレーブは自分のアドレスのフレームを受信したときのみ一度だけ通信を開始できる．
 * ・CheckSumが一致しなかったときは，データを破棄する．フレームの再送はプロトコルでは定義しない．
 * ----------------------------------------------------------------------------------------
 *	@バージョン		:	2.0.0
 *	@開発者		:	佐藤輝一
 *				:	キネクト
 *				:	太田那菜
 *	@使用環境		:	STM32F4DISCOVERY, MB_Ver3, MB_Ver4, Coocox CoIDE
 **************************************************************************/

#ifndef __TERUNET_H__
#define __TERUNET_H__

/* 定数定義	============================================================= */
#define TERUNET_RECV_TIMEOUT_MS	2
#define TERUNET_MYADDRESS		0x00
#define TERUNET_BAUDRATE		115200

/* 関数プロトタイプ宣言	===================================================== */
/* -------------------------------------------------
 * @関数名		:	Terunet_Init
 * @概要			:	Terunet(USART4)の初期化
 * @引数-baud	:	Terunet通信のボーレート
 * @戻り値		:	なし
 * ---------------------------------------------- */
void Terunet_Init(int baud);

/* ------------------------------------------------
 * @関数名	:	Terunet_ReceiveData
 * @概要		:	Terunet(USART4)から1[Byte]受け取る
 * @引数		:	受信データ格納先
 * @戻り値	:	成功:0 / 失敗:-1
 * --------------------------------------------- */
int	Terunet_ReceiveData(u16* data);

/* ------------------------------------------------
 * @関数名			:	Terunet_ReceiveFrame
 * @概要				:	Terunet(USART4)から1フレームを受信し、
 * 						解析後、受信データをバッファに格納する
 * @引数	-recvData	:	受信データを格納するバッファ
 * 		-cmd		:	通信コマンド
 * @戻り値			:	すべての受信に成功	:  0
 * 						1つでも失敗		: -1
 * --------------------------------------------- */
int Terunet_ReceiveFrame (u8 recvData[], u8 cmd);

/* -----------------------------------------------
 * @関数名		:	Terunet_SendData
 * @概要			:	Terunet(USART4)に1[Byte]送信する
 * @引数-data	:	送信するデータ
 * @戻り値		:	なし
 * ------------------------------------------- */
void Terunet_SendData(u8 data);

/* ----------------------------------------------
 * @関数名		:	Terunet_Config
 * @概要			:	Terunet(USART4)にアドレスを送信する
 * @引数-addr	:	送信するアドレス
 * @戻り値		:	なし
 * ------------------------------------------- */
void Terunet_SendAddr(u8 addr);

/* ----------------------------------------------
 * @関数名		:	Terunet_SendFrame
 * @概要			:	Terunet(USART4)にデータフレームを送信する
 * @引数			:	送り先のアドレス, 使いたい機能のコマンド,
 * 					data length, data(配列)
 * @戻り値		:	なし
 * ------------------------------------------- */
void Terunet_SendFrame(u8 slaveAddr, u8 cmd, u8 dataLength, const u8 data[]);

#endif /* __TERUNET_H__ */
