/***************************************************************************
 *	@ファイル名		:	motor.h
 *	@概要		:	DIGITAL-IOポートでモータを制御するためのPWM初期化と動作を行う．
 *					標準のモータドライバを使うことを想定している．
 *	@バージョン		:	2.0.0
 *	@開発者		:	キネクト
 *	@使用環境		:	STM32F4DISCOVERY, MB_Ver3, MB_Ver4, Coocox CoIDE
 **************************************************************************/

#ifndef __MOTOR_H__
#define __MOTOR_H__

/* 型定義	============================================================= */
/* DIGITAL-IOxごとに4つのモータをするための構造体 */
typedef struct
{
	// 0:FREE / +:CW / -:CCW / 32099:BRAKE
	short duty[4];

	// 0:FREE / 1:CW / 2:CCW / 3:BRAKE
	u8 dir[4];

	u8 dir_save[4];
	u8 dir_old [4];

	int isEnable[4];
	int deadtime[4];
} _motor_status_t;

/* 定数定義	============================================================= */
#define BRAKEVALUE			32099	// dutyの値をこの値にするとショートブレーキになる
#define MOTOR_DEADTIME_10US	20		// モータ駆動のデッドタイム*10[us]を指定する

/* 関数プロトタイプ宣言	===================================================== */
/* -------------------------------------------------
 * @関数名		:	MotorDriver_Init
 * @概要			:	モータポートの初期化をするが，
 * 					出力設定などはDigitalIO_Initを
 * 					使用すること．
 * @引数-motors	:	12bitでモータポートを使用するか否かを
 * 					決定します．1:有効/0:無効
 * @戻り値		:	なし
 * ---------------------------------------------- */
void MotorDriver_Init(u16 motors);

/* -------------------------------------------------
 * @関数名		:	Motor_Drive
 * @概要			:	モータポートからPWMを出力する
 * 					Digital-IOを出力設定してから呼び出すこと
 * @引数-ch		:	出力するチャンネル番号、0からの通し番号
 *　          -duty	:	dutyの値、ただし
 *　          				正の値は正転、負の値は逆転、
 *　          				BRAKEVALUEはショートブレーキを示す．
 * @戻り値		:	なし
 * ---------------------------------------------- */
void Motor_Drive(u8 ch, short duty);

#endif /* __MOTOR_H__ */
